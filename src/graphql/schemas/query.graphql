type Query {
  "Get or create a new declaration."
  declaracion(tipoDeclaracion: TipoDeclaracion!, declaracionCompleta: Boolean): Declaracion! @hasRole(roles:[USER])

  "Fetch declaration metadata"
  declaracionesMetadata(userID: LimitedString, filter: DeclaracionesFilterInput, pagination: PaginationOptionsInput): DeclaracionesMetadataPage! @isAuthenticated

  "Send an email with a token to reset the password."
  forgotPassword(username: LimitedString!): Boolean!

  "Authenticate a user in the system."
  login(username: Email!, password: LimitedString!): Login!

  "Search users"
  search(keyword: LimitedString!, pagination: PaginationOptionsInput): UsersPage @hasRole(roles: [ADMIN, SUPER_ADMIN, ROOT])

  "Retrieve all the stats by declaration type"
  stats: Stats! @isAuthenticated

  "Retrieve all the stats by declarations INICIAL and CONCLUSION"
  statsTipo: StatsTipo! @isAuthenticated

  "Retrieve all the stats by declaration type MODIFICACION group by anioEjercicio"
  statsModif: StatsModif! @isAuthenticated

  "Get the user profile"
  userProfile(id: ID): User! @isAuthenticated

  "Get all the users"
  users(pagination: PaginationOptionsInput): UsersPage! @hasRole(roles: [ADMIN, SUPER_ADMIN, ROOT])
}
